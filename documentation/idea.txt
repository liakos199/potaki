Phase 1: Foundation, Core Setup & Authentication
(Goal: Establish the project structure, basic navigation, user authentication, and profile management)
**AI Development Prompt - Phase 1: Foundation & Authentication**

**0. Expertise Required:**
You are an expert AI assistant specialized in TypeScript, React Native, Expo, Expo Router, Zustand, Supabase, Mobile UI Development, and modern software engineering best practices.

**1. Project Goal (Overall):**
Construct a mobile application for iOS and Android enabling users to reserve tables/seats at bars. The app will support Customer, Bar Owner, and Staff roles with RBAC via Supabase RLS. (This phase focuses on the foundation and auth).

**2. Core Technology Stack Choices (for entire project):**
*   Frontend Framework: React Native with Expo (Managed Workflow)
*   Navigation: **Expo Router**
*   State Management: **Zustand** (Global Client State) + **React Query** (Server State/Caching - setup later)
*   Styling: **NativeWind** (setup later)
*   Validation: **Zod** (setup later)
*   Backend Platform: **Supabase** (Auth, PostgreSQL, RLS, Realtime, Edge Functions, Storage)
*   Notifications: Expo Notification Service (setup later)

**3. Mandatory Standards & Conventions (Apply throughout):**
*   **Code Style & Structure:** Concise, technical TypeScript; functional/declarative; modular; descriptive names; Expo Router file structure; named exports; Prettier formatting.
*   **TypeScript Usage:** Strict mode; interfaces preferred; no enums (use const maps); `React.FC` or typed function syntax.
*   **Syntax & Formatting:** `function` keyword for pure utils, arrows for components/callbacks; concise conditionals; declarative JSX.
*   **Safe Area Management:** Use `react-native-safe-area-context` (`SafeAreaProvider`, `SafeAreaView`). Setup `SafeAreaProvider` in the root layout.
*   **Error Handling:** Plan for robust error handling (guard clauses, Error Boundaries - implement later).
*   **Security:** Basic security hygiene (HTTPS assumed via Supabase). Follow Expo/Supabase security guidelines.
*   **API Docs:** Refer to official Expo, Expo Router, Supabase docs.

**4. Phase 1 Specific Tasks:**

*   **Project Setup:**
    *   Initialize a new Expo project (Managed Workflow) with TypeScript.
    *   Setup Expo Router following its documentation. Create the basic `app` directory structure (including `_layout.tsx`).
    *   Install and configure core dependencies: `zustand`, `react-native-safe-area-context`.
    *   Install Supabase JS client (`@supabase/supabase-js`).
*   **Supabase Setup (Backend):**
    *   Create a Supabase project.
    *   Enable Authentication (Email/Password provider).
    *   **Database Schema:**
        *   Create `profiles` table (Public schema):
            *   `user_id` (UUID, PK, FK references `auth.users.id` ON DELETE CASCADE)
            *   `full_name` (TEXT, nullable)
            *   `role` (TEXT NOT NULL, CHECK (`role` IN ('customer', 'owner', 'staff')), DEFAULT 'customer')
            *   `push_token` (TEXT, nullable) -- Include now for later use
            *   `created_at` (TIMESTAMPTZ DEFAULT now())
            *   `updated_at` (TIMESTAMPTZ DEFAULT now())
        *   **RLS Policies (Profiles):** Enable RLS. Create policies allowing users to `SELECT` and `UPDATE` their *own* profile (`user_id = auth.uid()`). Allow authenticated users to `SELECT` minimal profile info if needed elsewhere (adjust later). Allow service role for triggers if needed.
        *   Create a database function/trigger (optional but good practice) to automatically create a `profile` entry when a new user signs up in `auth.users`.
*   **Frontend Development:**
    *   **Zustand Store:** Create a Zustand store to manage authentication state (`session`, `user`, `profile`, `isLoading`, `error`). Include actions for `signIn`, `signUp`, `signOut`, `setSession`, `fetchUserProfile`.
    *   **Supabase Client:** Initialize the Supabase client, making keys available securely (e.g., via environment variables using `expo-constants`).
    *   **Auth Flow (Expo Router):**
        *   Implement Sign In and Sign Up screens (e.g., `/sign-in`, `/sign-up`) using Expo Router file structure. Include basic form handling and call Supabase auth functions (`supabase.auth.signInWithPassword`, `supabase.auth.signUp`). Update Zustand store on success/error.
        *   Implement logic in the root layout (`app/_layout.tsx`) or a dedicated auth context/hook that listens to `supabase.auth.onAuthStateChange`. Update the Zustand store with the session.
        *   Implement route protection: Use the auth state from Zustand in layouts (`_layout.tsx` files within route groups) to redirect unauthenticated users to the Sign In screen. Define route groups (e.g., `(app)`, `(auth)`) in Expo Router to separate authenticated and unauthenticated routes.
    *   **Basic Authenticated Screen:** Create a simple placeholder screen within the authenticated group (e.g., `(app)/home.tsx`) that displays basic user info (fetched via Zustand store after login) and a Sign Out button. The Sign Out button should call `supabase.auth.signOut` and clear the Zustand auth state.
    *   **Profile Management (Basic):** Create a screen (e.g., `(app)/profile.tsx`) where authenticated users can view and update their `full_name` from their `profiles` record. Fetch profile data (potentially via the Zustand store action `fetchUserProfile`) and implement an update mutation calling `supabase.from('profiles').update(...)`.

**5. Phase 1 Objective:**
Produce a functional Expo app foundation using Expo Router. Users can sign up, sign in, and sign out. Authentication state is managed globally via Zustand and used to protect routes. Basic profile viewing/editing is implemented. Supabase backend has auth enabled and the `profiles` table with initial RLS.


////////////


Phase 2: Bar Discovery & Viewing (Customer)
(Goal: Implement the ability for customers to find and view detailed information about bars)
**AI Development Prompt - Phase 2: Bar Discovery & Viewing**

**0. Prerequisite:** Completion of Phase 1 (Foundation & Auth).

**1. Phase 2 Goal:**
Enable authenticated users (Customers) to browse, search, filter, and view detailed information about bars, including location, menu, photos, and seating options.

**2. Technology Integration & Setup:**
*   **State Management:** Install and configure **`@tanstack/react-query`** for server state management. Set up a `QueryClientProvider`.
*   **Styling:** Install and configure **NativeWind**. Set up `tailwind.config.js` and integrate with components.
*   **Mapping:** Install **`react-native-maps`**. Configure API keys if necessary for map providers (e.g., Google Maps on Android).
*   **Image Handling:** Install **`expo-image`**.

**3. Supabase Schema Expansion (Backend):**
*   **Enable PostGIS:** Ensure the PostGIS extension is enabled in your Supabase project via the dashboard (SQL Editor: `create extension postgis with schema extensions;`).
*   **New Tables:** Create the following tables (Public schema):
    *   `bars` ( `bar_id` PK, `owner_id` FK->auth.users, `name`, `address`, `phone`, `website`, `description`, `price_range`, `daily_reservation_limit`, `location` (extensions.postgis `geometry(Point, 4326)`), `music_type`, `is_drink_selection_mandatory` BOOLEAN, timestamps)
    *   `operating_hours` (`hour_id` PK, `bar_id` FK->bars, `day_of_week` INT 0-6, `open_time` TIME, `close_time` TIME)
    *   `menu_items` (`item_id` PK, `bar_id` FK->bars, `name`, `description`, `price` DECIMAL, `category` TEXT, timestamps)
    *   `seat_options` (`option_id` PK, `bar_id` FK->bars, `name`, `booking_type` TEXT CHECK, `min_people` INT, `max_people` INT, `available_count` INT, `minimum_spend` DECIMAL, timestamps)
    *   `bar_photos` (`photo_id` PK, `bar_id` FK->bars, `storage_object_path` TEXT, `uploaded_at` TIMESTAMPTZ)
*   **RLS Policies (Read Access):** Enable RLS on new tables. Create policies allowing *any authenticated user* to `SELECT` data from `bars`, `operating_hours`, `menu_items`, `seat_options`, `bar_photos`.
*   **Storage Setup:** Create a Supabase Storage bucket (e.g., `bar-photos`) with appropriate public read access policies (or policies allowing authenticated reads).

**4. Frontend Development (Customer Focus):**
*   **React Query Hooks:** Create custom hooks using `useQuery` (from `@tanstack/react-query`) for fetching:
    *   List of bars (potentially with searching/filtering parameters passed to Supabase functions or directly in the query).
    *   Details of a single bar (including its related operating hours, menu items, seat options, photos).
*   **Bar List Screen (e.g., `(app)/index.tsx` or `(app)/bars/index.tsx`):**
    *   Fetch and display a list or grid of bars using the React Query hook.
    *   Implement basic UI for searching/filtering (state managed locally or via URL params with Expo Router, triggering React Query refetch).
    *   Each bar item should be pressable, navigating to the Bar Detail screen using Expo Router (`router.push('/bars/[barId]')`).
    *   Use NativeWind for styling.
*   **Bar Detail Screen (e.g., `(app)/bars/[barId].tsx`):**
    *   Use `useLocalSearchParams` from Expo Router to get the `barId`.
    *   Use the React Query hook to fetch detailed data for the specific bar ID. Handle loading and error states from React Query.
    *   Display all bar details: Name, description, address, phone, website, price range, music type.
    *   Display Operating Hours (formatted nicely).
    *   Display Menu Items (grouped by category).
    *   Display Seat Options (showing name, capacity, minimum spend).
    *   Display Bar Photos (using `expo-image`, fetched from Supabase Storage URLs stored in `bar_photos`). Handle multiple photos (e.g., carousel).
    *   Display Bar Location on a map using `react-native-maps` (`MapView`, `Marker`).
    *   Style using NativeWind. Ensure content respects Safe Areas.

**5. Phase 2 Objective:**
Authenticated users can now discover bars through a list/search interface and view comprehensive details for any selected bar, including its menu, photos, location on a map, and seating types. Data fetching is managed by React Query. Styling is done via NativeWind. The Supabase schema includes all bar-related tables with read-access RLS.

Phase 3: Bar Management (Owner Role)
(Goal: Implement the functionality for Bar Owners to manage their bars, menus, seating, photos, and staff)
**AI Development Prompt - Phase 3: Bar Management (Owner)**

**0. Prerequisite:** Completion of Phase 1 & 2.


////////////


**1. Phase 3 Goal:**
Enable users with the 'owner' role to create, view, update, and delete their own bar listings, including managing menus, operating hours, seat options, photos, and assigning staff members.

**2. Supabase Schema Refinement (Backend):**
*   **RLS Policies (Owner CRUD):** Modify/Add RLS policies on `bars`, `operating_hours`, `menu_items`, `seat_options`, `bar_photos`.
    *   Allow users with `role = 'owner'` to `INSERT` into `bars` (ensure `owner_id` is set to `auth.uid()`).
    *   Allow users with `role = 'owner'` to `UPDATE` and `DELETE` records where the `owner_id` on the related `bars` table matches `auth.uid()`. Apply this logic across all related tables (`operating_hours`, `menu_items`, etc. requiring checks against the parent `bar`'s `owner_id`).
*   **Storage Policies:** Refine Storage bucket policies (e.g., for `bar-photos`) to allow owners to `INSERT`, `UPDATE`, `DELETE` objects linked to their bars (likely based on object path naming conventions or metadata if supported easily).
*   **Staff Table:** Create `bar_staff` table (Public schema):
    *   `assignment_id` (UUID PK DEFAULT gen_random_uuid())
    *   `user_id` (UUID NOT NULL, FK references `auth.users.id` ON DELETE CASCADE)
    *   `bar_id` (UUID NOT NULL, FK references `bars` ON DELETE CASCADE)
    *   UNIQUE (`user_id`, `bar_id`)
    *   `created_at` (TIMESTAMPTZ DEFAULT now())
*   **RLS Policies (Staff Management):** Enable RLS on `bar_staff`. Allow users with `role = 'owner'` to `INSERT` and `DELETE` records where the `bar_id` corresponds to a bar they own.

**3. Frontend Development (Owner Focus):**
*   **Expo Router Structure:** Create a dedicated route group for owner actions (e.g., `(app)/(owner)/`). Protect this group using layout logic that checks if the user's role (from Zustand store/profile) is 'owner'.
*   **React Query Mutations:** Create custom hooks using `useMutation` (from `@tanstack/react-query`) for all Owner CRUD operations:
    *   Create Bar, Update Bar Details.
    *   Add/Update/Delete Menu Item.
    *   Add/Update/Delete Operating Hours set.
    *   Add/Update/Delete Seat Option.
    *   Upload Photo (using `supabase.storage.from(...).upload`), Delete Photo (using `supabase.storage.from(...).remove` and deleting DB record).
    *   Assign Staff (`INSERT` into `bar_staff`), Remove Staff (`DELETE` from `bar_staff`).
*   **Owner Dashboard/Bar List (e.g., `(app)/(owner)/bars/index.tsx`):**
    *   Fetch and display only the bars owned by the current user (use `useQuery` with appropriate Supabase filter `eq('owner_id', userId)`).
    *   Provide a button/link to create a new bar.
    *   Link to edit existing owned bars.
*   **Create/Edit Bar Form (e.g., `(app)/(owner)/bars/create.tsx`, `(app)/(owner)/bars/[barId]/edit.tsx`):**
    *   Implement forms for all `bars` table fields (including map input for location using `react-native-maps`).
    *   Use React Query mutations to save data. Handle form validation (consider using a library like `react-hook-form` integrated with Zod).
*   **Management Sections (within Bar Edit or separate routes e.g., `(app)/(owner)/bars/[barId]/menu.tsx`):**
    *   Implement UIs for managing Menu Items (list, add, edit, delete forms/modals).
    *   Implement UIs for managing Operating Hours (e.g., inputs for each day).
    *   Implement UIs for managing Seat Options (list, add, edit, delete forms/modals).
    *   Implement UIs for managing Photos (display current photos, upload new ones, delete existing ones). Use `expo-image-picker` to select photos.
*   **Staff Management Screen (e.g., `(app)/(owner)/bars/[barId]/staff.tsx`):**
    *   Display current staff assigned to the bar (fetch from `bar_staff`).
    *   Implement UI to search for existing users (e.g., by email - requires a way to query `profiles` or `auth.users`, potentially via an Edge Function for security/privacy).
    *   Provide buttons to assign a found user as staff (calling the `INSERT` mutation) and remove existing staff (calling the `DELETE` mutation).

**4. Phase 3 Objective:**
Bar Owners have a dedicated section in the app where they can create new bar listings and fully manage all aspects of their existing bars: details, operating hours, menus, seating arrangements, photos, and staff assignments. All actions are secured via RLS policies, and data operations use React Query mutations.


////////////


Phase 4: Reservations, Realtime, Staff Actions & Notifications
(Goal: Implement the core reservation system for customers, management tools for owners/staff, real-time updates, and notifications)
**AI Development Prompt - Phase 4: Reservations & Realtime**

**0. Prerequisite:** Completion of Phase 1, 2 & 3.

**1. Phase 4 Goal:**
Implement the full reservation lifecycle: Customers can book seats, view their reservations. Owners/Staff can manage incoming reservations. Staff can mark tables as available again. Implement real-time availability updates and push notifications for key events.

**2. Technology Integration & Setup:**
*   **Realtime:** Ensure Supabase Realtime is enabled and properly configured in the Supabase client setup.
*   **Edge Functions:** Set up the Supabase CLI if not already done, configure Edge Functions (TypeScript/Deno).
*   **Validation:** Mandate **Zod** for validating inputs/outputs of all Edge Functions.
*   **Notifications:** Install **`expo-notifications`**.
*   **Progress Indicator:** Install **`react-native-progress`** (if not already present).

**3. Supabase Schema & Backend:**
*   **Reservations Table:** Create `reservations` table (Public schema):
    *   `reservation_id` (UUID PK DEFAULT gen_random_uuid())
    *   `user_id` (UUID NOT NULL, FK references `auth.users.id`)
    *   `bar_id` (UUID NOT NULL, FK references `bars`)
    *   `seat_option_id` (UUID NOT NULL, FK references `seat_options`)
    *   `reservation_date` (DATE NOT NULL)
    *   `party_size` (INTEGER NOT NULL)
    *   `status` (TEXT NOT NULL, CHECK (`status` IN ('pending', 'confirmed', 'cancelled', 'completed', 'no_show', 'departed')), DEFAULT 'pending')
    *   `selected_drink_details` (JSONB, nullable)
    *   `created_at` (TIMESTAMPTZ DEFAULT now())
    *   `updated_at` (TIMESTAMPTZ DEFAULT now())
*   **RLS Policies (Reservations):** Enable RLS.
    *   Allow Customers to `SELECT` their own reservations (`user_id = auth.uid()`).
    *   Allow Owners/Staff to `SELECT` reservations for bars they own/manage (check `bar_id` against owned bars or `bar_staff` linkage).
    *   Allow Owners/Staff to `UPDATE` the `status` of reservations for their bars.
    *   `INSERT` only allowed via the Edge Function. `DELETE` might be restricted or handled via 'cancelled' status.
*   **RLS Policies (Staff Read):** Ensure Staff can `SELECT` relevant info from `bars`, `seat_options`, etc. for their assigned bar(s) based on `bar_staff` linkage.
*   **Database Indexes:** Consider adding indexes on `reservations` table (e.g., on `(bar_id, reservation_date, seat_option_id)`, `user_id`).
*   **Edge Functions (MANDATORY - TypeScript/Deno):**
    *   `createReservation`:
        *   Input: `{ bar_id, seat_option_id, reservation_date, party_size, selected_drink_details? }`. **Validate with Zod.**
        *   Logic: Verify user auth. Perform atomic checks: date validity, party size vs seat limits, bar daily limit, **real-time seat availability** ( `seat_options.available_count` vs `COUNT` active reservations for option/date - handle concurrency).
        *   Action: If valid, `INSERT` into `reservations`.
        *   Output: Success/error response. **Validate with Zod.** Optionally trigger notification function.
    *   `freeUpTable`:
        *   Input: `{ reservation_id }`. **Validate with Zod.**
        *   Logic: Verify user auth & role ('staff' or 'owner'). Verify user is staff/owner for the specific bar associated with `reservation_id` (check `bar_staff` or `bars.owner_id`).
        *   Action: Update reservation `status` (e.g., to 'departed') or implement logic ensuring this seat is now counted as available by the real-time calculation.
        *   Output: Success/error response. **Validate with Zod.** Triggers Realtime update.
    *   `sendReservationNotification`:
        *   Input: `{ target_user_id, message_type, reservation_details? }`. **Validate with Zod.**
        *   Logic: Fetch `push_token` from `profiles` for `target_user_id`. Construct payload based on `message_type` (e.g., 'created', 'confirmed', 'cancelled').
        *   Action: Call Expo Push API (`https://exp.host/--/api/v2/push/send`). Handle response/errors.
*   **Database Webhooks (Optional but recommended):** Trigger notification Edge Functions based on inserts/updates in the `reservations` table.

**4. Frontend Development:**
*   **Availability Logic:** Implement client-side logic (or leverage Supabase Realtime subscriptions effectively) to calculate and display the *current* number of available seats for a specific `seat_option` on a given `date`, considering `seat_options.available_count` minus active reservations. This display needs to update in real-time.
*   **Reservation Flow UI (Customer - e.g., `/reserve/[barId]/...`):**
    *   Integrate the multi-step UI using `react-native-progress`.
    *   Display real-time availability for seat options.
    *   Conditionally show drink selection based on `bars.is_drink_selection_mandatory`.
    *   On final confirmation, call the `createReservation` Edge Function using a React Query mutation (`useMutation`). Handle loading/error states, show feedback with `Toast.tsx ( toast.show )`. Navigate on success.
*   **My Reservations Screen (Customer - e.g., `(app)/reservations/index.tsx`):**
    *   Use `useQuery` to fetch the user's reservations (`filter('user_id', 'eq', userId)`).
    *   Display reservation details and status.
    *   Use Supabase Realtime subscription on the `reservations` table (filtered for user's ID) to update statuses live (e.g., pending -> confirmed). Invalidate React Query cache on update.
*   **Reservation Management Screen (Owner/Staff - e.g., `(app)/(owner)/reservations/index.tsx` or `(app)/(staff)/reservations/index.tsx`):**
    *   Protect route based on role ('owner' or 'staff').
    *   Use `useQuery` to fetch reservations for the owner's/staff's assigned bar(s), filterable by date.
    *   Display reservation details including customer name (requires join or separate query), party size, status.
    *   Provide buttons to 'Confirm' or 'Cancel' reservations (calling `supabase.from('reservations').update(...)` via `useMutation`). RLS enforces permissions.
    *   Use Realtime subscriptions (filtered for relevant bar IDs) to update the list live.
*   **Staff "Free Up Table" UI:**
    *   On the Staff Reservation Management screen, add a button/action on 'confirmed' reservations.
    *   This action triggers a React Query mutation calling the `freeUpTable` Edge Function. Provide user feedback.
*   **Real-time Availability Updates:** Ensure UI elements displaying seat availability (e.g., on the Bar Detail screen or during the reservation flow) subscribe to relevant changes (e.g., new reservations, freed-up tables) via Realtime and update accordingly (likely by refetching availability counts via React Query invalidation).
*   **Notification Handling:**
    *   Implement logic (likely in root layout or context) using `expo-notifications` to request permissions, get the push token, and send it to the backend (saving in `profiles`).
    *   Set up listeners using `expo-notifications` to handle received notifications while the app is foregrounded, backgrounded, or killed.

**5. Phase 4 Objective:**
The core reservation functionality is complete. Customers can book, view status updates in real-time. Owners/Staff can manage bookings. Staff have the crucial ability to free up tables dynamically. Real-time updates reflect accurate availability. Push notifications inform users of key reservation events. The application leverages Edge Functions for secure, critical operations.